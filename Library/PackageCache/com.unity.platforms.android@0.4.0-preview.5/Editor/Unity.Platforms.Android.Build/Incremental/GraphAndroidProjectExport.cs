#if ENABLE_EXPERIMENTAL_INCREMENTAL_PIPELINE
using System;
using System.IO;
using Unity.Build;
using Unity.Build.Classic;
using Unity.Build.Classic.Private.IncrementalClassicPipeline;

namespace Unity.Platforms.Android.Build
{
    sealed class GraphAndroidProjectExport : BuildStepBase
    {
        public override Type[] UsedComponents { get; } =
        {
            typeof(AndroidAPILevels),
            typeof(ClassicScriptingSettings),
            typeof(ApplicationIdentifier),
            typeof(AndroidExportSettings),
            typeof(AndroidArchitectures)
        };

        /*
        protected string[] SimpleConfigs
        {
            get { return m_SourceBuild ? new[] { "Debug", "Development", "Release" } : new[] { "Debug", "Release" }; }
        }

        protected static string[] ScriptingImplementations
        {
            get { return new[] { "IL2CPP", "Mono" }; }
        }

        // Wrapper functions for the events to be usable from derived classes

        */
        public override BuildResult Run(BuildContext context)
        {
            var incrementalClassicData = context.GetValue<IncrementalClassicSharedData>();
            var apiLevels = context.GetComponentOrDefault<AndroidAPILevels>();
            var androidBuildContext = context.GetValue<AndroidBuildContext>();
            var exportSettings = context.GetComponentOrDefault<AndroidExportSettings>();

            int minify = 0;// TODO context.GetValue<int>(Constants.Minification);
            int mrel = minify & 3;
            int mdbg = minify >> 2;

            var androidProjectContext = new AndroidProjectContext()
            {
                PackageName = context.GetComponentOrDefault<ApplicationIdentifier>().PackageName,
                MinSDKVersion = (int)apiLevels.MinAPILevel,
                // TODO: fix Auto
                TargetSDKVersion = (int)apiLevels.ResolvedTargetAPILevel,
                GoogleBuildTools = new Version(28, 0, 3),   //TODO SDKManager.GetInstance().HighestVersionInstalled(SDKManager.Component.BuildTools);
                UseObb = false, //TODO m_AndroidBuildContext.UsingObbFiles;
                ScriptingBackend = context.GetComponentOrDefault<ClassicScriptingSettings>().ScriptingBackend,
                SourceBuild = context.HasComponent<InstallInBuildFolder>(),
                ProguardContext = new ProguardContext()
                {
                    MinifyRelease = (mrel != AndroidBuildContext.kMinificationNone),
                    UseProguardRelease = (mrel == AndroidBuildContext.kMinificationProguard),
                    MinifyDebug = (mdbg != AndroidBuildContext.kMinificationNone),
                    UseProguardDebug = (mdbg == AndroidBuildContext.kMinificationProguard)
                },
                GradleTemplateDirectory = androidBuildContext.ResourcesPath.Combine("GradleTemplates"),
                ProGuardTemplateDirectory = androidBuildContext.ResourcesPath.Combine("ProGuardTemplates"),
                BuildApkPerCpuArchitecture = false, //TODO
                InjectUnityBuildScripts = exportSettings.BuildSystem != AndroidBuildSystem.VisualStudio,
                Architectures = context.GetComponentOrDefault<AndroidArchitectures>().Architectures
            };


            // TODO:
            var projectType = AndroidBuildSystem.Gradle;

            switch (projectType)
            {
                case AndroidBuildSystem.Gradle:
                    new AndroidProjectExportGradle(androidProjectContext, androidBuildContext, incrementalClassicData).Export();
                    break;
                //case AndroidBuildSystem.VisualStudio:
                //return new AndroidProjectExportVisualStudioGradle();
                default:
                    throw new Exception($"Unsupported build system:{projectType}");
            }


            return context.Success();
        }

        private static string GetOverwritableFilePath(string targetPath)
        {
            if (File.Exists(targetPath))
            {
                var contents = File.ReadAllText(targetPath);
                if (!contents.StartsWith("// GENERATED BY UNITY"))
                    targetPath = targetPath + ".NEW";
            }
            return targetPath;
        }
    }
}
#endif
